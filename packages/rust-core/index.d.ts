/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export type LiveTSEngine = LiveTsEngine
/** The main LiveTS engine that coordinates all core functionality */
export declare class LiveTsEngine {
  /** Creates a new LiveTS engine instance */
  constructor()
  /** Renders a component and returns the diff patches */
  renderComponent(componentId: string, oldHtml: string, newHtml: string): string
  /** Renders a component and returns compact string patches for ultra-efficient WebSocket transmission */
  renderComponentCompact(componentId: string, oldHtml: string, newHtml: string): string
  /**
   * Renders a component and returns complete ultra-compact WebSocket message
   * This eliminates ALL JSON operations in TypeScript layer
   */
  renderComponentMessage(componentId: string, oldHtml: string, newHtml: string): string
  /**
   * Parse WebSocket event message directly in Rust (Phase 1 optimization)
   * This eliminates Node.js parsing overhead and reduces FFI crossings
   */
  parseEventMessage(rawMessage: string): string
  /** Fast check if message is a ping (avoids parsing overhead) */
  isPingMessage(rawMessage: string): boolean
  /** Set the TypeScript event processor callback */
  setEventProcessor(callback: (...args: any[]) => any): NapiResult
  /**
   * Parse event and prepare for processing (Phase 2 step 1)
   * Returns parsed event data with cached HTML for TypeScript processing
   */
  parseEventAndGetCache(rawMessage: string): string
  /**
   * Process response and generate message (Phase 2 step 2)
   * Takes new HTML from TypeScript and generates optimized diff response
   */
  processResponseAndGenerateMessage(componentId: string, oldHtml: string, newHtml: string): string
  /** Cache component HTML (useful for initial renders) */
  cacheComponentHtml(componentId: string, html: string): void
  /** Get cached component HTML */
  getCachedHtml(componentId: string): string | null
  /** Remove component from cache */
  removeComponentCache(componentId: string): boolean
  /** Get cache statistics */
  getCacheStats(): string
}
export type LiveTSWebSocketBroker = LiveTsWebSocketBroker
/** Tokio-based WebSocket broker running inside the Rust core */
export declare class LiveTsWebSocketBroker {
  constructor()
  /** Register a JS callback that receives broker events as JSON strings */
  setEventHandler(callback: (...args: any[]) => any): NapiResult
  /** Start listening on a TCP port for WebSocket upgrades (ws://host:port/livets-ws) */
  listen(host: string, port: number): void
  /** Stop the listener and close all connections */
  stop(): void
  /** Send a JSON-stringified message to a specific connection */
  sendToConnection(connectionId: string, message: string): void
  /** Register a component to a connection (for targeted broadcasts) */
  registerComponent(componentId: string, connectionId: string): void
  /** Unregister a component from a connection */
  unregisterComponent(componentId: string, connectionId: string): void
}
