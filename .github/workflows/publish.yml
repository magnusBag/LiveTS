name: Publish

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              cd packages/rust-core
              npx napi build --platform --release --target x86_64-unknown-linux-gnu
              ls -la *.node || echo "No .node files found yet"
              find . -name "*.node" -exec strip {} \; || echo "Strip completed or no files to strip"
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cd packages/rust-core
              npx napi build --platform --release --target x86_64-apple-darwin
              ls -la *.node || echo "No .node files found yet"
              find . -name "*.node" -exec strip -x {} \; || echo "Strip completed or no files to strip"
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cd packages/rust-core
              npx napi build --platform --release --target aarch64-apple-darwin
              ls -la *.node || echo "No .node files found yet"
              find . -name "*.node" -exec strip -x {} \; || echo "Strip completed or no files to strip"
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cd packages/rust-core
              npx napi build --platform --release --target x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/rust-core/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: npm ci

      - name: Build native module
        run: ${{ matrix.settings.build }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.settings.target }}
          path: packages/rust-core/*.node
          if-no-files-found: error

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    environment: Publish-env

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to rust-core package
        run: |
          echo "Downloaded artifacts:"
          find artifacts -name "*.node" -ls || echo "No .node files found"
          echo "Moving artifacts to packages/rust-core/"
          # Copy all .node files from artifacts to rust-core root
          cp artifacts/binaries-*/*.node packages/rust-core/ 2>/dev/null || true
          # Create npm directory structure expected by napi
          mkdir -p packages/rust-core/npm/linux-x64-gnu
          mkdir -p packages/rust-core/npm/win32-x64-msvc
          mkdir -p packages/rust-core/npm/darwin-x64
          mkdir -p packages/rust-core/npm/darwin-arm64
          # Copy files to expected npm locations based on filename patterns
          for file in packages/rust-core/*.node; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "Processing: $filename"
              case "$filename" in
                *linux*)
                  cp "$file" "packages/rust-core/npm/linux-x64-gnu/livets-core.linux-x64-gnu.node"
                  ;;
                *win32*|*windows*)
                  cp "$file" "packages/rust-core/npm/win32-x64-msvc/livets-core.win32-x64-msvc.node"
                  ;;
                *darwin*x86_64*|*darwin*x64*)
                  cp "$file" "packages/rust-core/npm/darwin-x64/livets-core.darwin-x64.node"
                  ;;
                *darwin*aarch64*|*darwin*arm64*)
                  cp "$file" "packages/rust-core/npm/darwin-arm64/livets-core.darwin-arm64.node"
                  ;;
              esac
            fi
          done
          echo "Files in packages/rust-core after moving artifacts:"
          ls -la packages/rust-core/
          echo "Files in npm directories:"
          find packages/rust-core/npm -name "*.node" -ls 2>/dev/null || echo "No files in npm directories yet"

      - name: Build all packages
        run: npm run build

      - name: Publish packages
        run: |
          # Publish packages in dependency order
          echo "Publishing @magnusbag/livets-rust-core..."
          cd packages/rust-core
          npm publish --access public --verbose

          echo "Publishing @magnusbag/livets-core..."
          cd ../core
          npm publish --access public --verbose

          echo "Publishing @magnusbag/livets-client..."
          cd ../client
          npm publish --access public --verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "LiveTS v${{ steps.get_version.outputs.version }}" \
            --notes "## LiveTS v${{ steps.get_version.outputs.version }}

          ### What's Changed
          - Real-time server-rendered web applications with TypeScript and Rust
          - Intelligent HTML diffing for efficient DOM updates
          - Generic class change detection for any CSS framework
          - High-performance WebSocket communication

          ### Installation
          \`\`\`bash
          npm install @magnusbag/livets-core @magnusbag/livets-client @magnusbag/livets-rust-core
          \`\`\`

          See the [documentation](https://github.com/${{ github.repository }}) for usage examples." \
            --verify-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
